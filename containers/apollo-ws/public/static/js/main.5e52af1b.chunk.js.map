{"version":3,"sources":["App.js","index.js"],"names":["GET_MESSAGES","gql","_templateObject","MESSAGE_CREATED","_templateObject2","Messages","this","props","subscribeToMore","document","updateQuery","prev","_ref2","subscriptionData","data","messages","Object","toConsumableArray","concat","messageCreated","react_default","a","createElement","map","message","key","id","content","React","Component","App","react_apollo_browser_umd","query","_ref","loading","App_Messages","console","log","process","REACT_APP_APOLLO_WS_HOST","REACT_APP_APOLLO_WS_PORT","REACT_APP_APOLLO_HTTP_HOST","REACT_APP_APOLLO_HTTP_PORT","apolloWSUri","apolloHTTPUri","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","terminatingLink","split","_getMainDefinition","getMainDefinition","kind","operation","link","ApolloLink","from","cache","InMemoryCache","client","ApolloClient","ReactDOM","render","src_App","getElementById"],"mappings":"4kBAIA,IAAMA,EAAeC,IAAHC,KASZC,EAAkBF,IAAHG,KA8BfC,8LAEFC,KAAKC,MAAMC,gBAAgB,CACzBC,SAAUN,EACVO,YAAa,SAACC,EAADC,GAAgC,IAAvBC,EAAuBD,EAAvBC,iBACpB,OAAKA,EAAiBC,KAEf,CACLC,SAASC,OAAAC,EAAA,EAAAD,CACJL,EAAKI,UADFG,OAAA,CAENL,EAAiBC,KAAKK,kBALSR,sCAavC,OACES,EAAAC,EAAAC,cAAA,UACGhB,KAAKC,MAAMQ,SAASQ,IAAI,SAAAC,GAAO,OAC9BJ,EAAAC,EAAAC,cAAA,MAAIG,IAAKD,EAAQE,IAAKF,EAAQG,mBArBjBC,IAAMC,WA4BdC,EAjDH,kBACVV,EAAAC,EAAAC,cAACS,EAAA,MAAD,CAAOC,MAAOhC,GACX,SAAAiC,GAAwC,IAArCnB,EAAqCmB,EAArCnB,KAAMoB,EAA+BD,EAA/BC,QAAS1B,EAAsByB,EAAtBzB,gBACjB,OAAKM,EAIDoB,EACKd,EAAAC,EAAAC,cAAA,2BAIPF,EAAAC,EAAAC,cAACa,EAAD,CACEpB,SAAUD,EAAKC,SACfP,gBAAiBA,IAVZ,QCbf4B,QAAQC,IAAIC,oBAORA,gPAJFC,6BACAC,6BACAC,+BACAC,+BAGFN,QAAQC,IAAIC,iPAEZ,IAAMK,EAAW,QAAAzB,OAAWqB,EAAX,KAAArB,OAAuCsB,EAAvC,YACXI,EAAa,UAAA1B,OAAauB,EAAb,KAAAvB,OAA2CwB,EAA3C,YAEnBN,QAAQC,IAAIM,EAAaC,GAEzB,IAAMC,EAAW,IAAIC,IAAS,CAC5BC,IAAKH,IAGDI,EAAS,IAAIC,IAAc,CAC/BF,IAAKJ,EACLO,QAAS,CACPC,WAAW,KAITC,EAAkBC,YACtB,SAAApB,GAAe,IAAZD,EAAYC,EAAZD,MAAYsB,EACeC,YAAkBvB,GAAtCwB,EADKF,EACLE,KAAMC,EADDH,EACCG,UACd,MACW,wBAATD,GAAgD,iBAAdC,GAGtCT,EACAH,GAGIa,EAAOC,IAAWC,KAAK,CAACR,IAExBS,EAAQ,IAAIC,IAEZC,EAAS,IAAIC,IAAa,CAC9BN,OACAG,UAGFI,IAASC,OACP9C,EAAAC,EAAAC,cAACS,EAAA,eAAD,CAAgBgC,OAAQA,GACtB3C,EAAAC,EAAAC,cAAC6C,EAAD,OAEF1D,SAAS2D,eAAe","file":"static/js/main.5e52af1b.chunk.js","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nconst GET_MESSAGES = gql`\n  query {\n    messages {\n      id\n      content\n    }\n  }\n`;\n\nconst MESSAGE_CREATED = gql`\n  subscription {\n    messageCreated {\n      id\n      content\n    }\n  }\n`;\n\nconst App = () => (\n  <Query query={GET_MESSAGES}>\n    {({ data, loading, subscribeToMore }) => {\n      if (!data) {\n        return null;\n      }\n\n      if (loading) {\n        return <span>Loading ...</span>;\n      }\n\n      return (\n        <Messages\n          messages={data.messages}\n          subscribeToMore={subscribeToMore}\n        />\n      );\n    }}\n  </Query>\n);\n\nclass Messages extends React.Component {\n  componentDidMount() {\n    this.props.subscribeToMore({\n      document: MESSAGE_CREATED,\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        return {\n          messages: [\n            ...prev.messages,\n            subscriptionData.data.messageCreated,\n          ],\n        };\n      },\n    });\n  }\n\n  render() {\n    return (\n      <ul>\n        {this.props.messages.map(message => (\n          <li key={message.id}>{message.content}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloClient } from 'apollo-client'\nimport { getMainDefinition } from 'apollo-utilities'\nimport { ApolloLink, split } from 'apollo-link'\nimport { HttpLink } from 'apollo-link-http'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nimport { config } from 'dotenv'\n\nimport App from './App'\nconsole.log(process.env.NODE_ENV)\n\nconst {\n  REACT_APP_APOLLO_WS_HOST,\n  REACT_APP_APOLLO_WS_PORT,\n  REACT_APP_APOLLO_HTTP_HOST,\n  REACT_APP_APOLLO_HTTP_PORT\n} = process.env\n\nconsole.log(process.env)\n\nconst apolloWSUri = `ws://${REACT_APP_APOLLO_WS_HOST}:${REACT_APP_APOLLO_WS_PORT}/graphql`\nconst apolloHTTPUri = `http://${REACT_APP_APOLLO_HTTP_HOST}:${REACT_APP_APOLLO_HTTP_PORT}/graphql`\n\nconsole.log(apolloWSUri, apolloHTTPUri)\n\nconst httpLink = new HttpLink({\n  uri: apolloHTTPUri,\n})\n\nconst wsLink = new WebSocketLink({\n  uri: apolloWSUri,\n  options: {\n    reconnect: true,\n  },\n})\n\nconst terminatingLink = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return (\n      kind === 'OperationDefinition' && operation === 'subscription'\n    )\n  },\n  wsLink,\n  httpLink,\n)\n\nconst link = ApolloLink.from([terminatingLink])\n\nconst cache = new InMemoryCache()\n\nconst client = new ApolloClient({\n  link,\n  cache,\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}